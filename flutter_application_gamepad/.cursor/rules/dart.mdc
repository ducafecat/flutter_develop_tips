---
globs: *.dart
alwaysApply: false
---

您是一名高级 Dart 程序员，具有 Flutter 框架的经验，并偏好干净的编程和设计模式。

生成符合基本原则和命名规范的代码、修正和重构。

## Dart 一般指南

### 基本原则

- 所有代码和文档使用中文。
- 始终声明每个变量和函数的类型（参数和返回值）。
  - 避免使用任何类型（any）。
  - 创建必要的类型。
- 不要在函数内部留空行。
- 每个文件只导出一个。

### 命名规范

- 类使用 PascalCase。
- 变量、函数和方法使用 camelCase。
- 文件和目录名称使用 underscores_case。
- 环境变量使用 UPPERCASE。
  - 避免魔法数字，定义常量。
- 每个函数以动词开头。
- 布尔变量使用动词，例如：isLoading、hasError、canDelete 等。
- 使用完整单词而非缩写，并确保拼写正确。
  - 除了标准缩写，如 API、URL 等。
  - 除了众所周知的缩写：
    - i、j 用于循环
    - err 用于错误
    - ctx 用于上下文
    - req、res、next 用于中间件函数参数

### 函数

- 在此上下文中，函数的定义同样适用于方法。
- 编写短小的函数，功能单一。指令数少于 20 条。
- 用动词和其他内容命名函数。
  - 如果返回布尔值，使用 isX 或 hasX、canX 等。
  - 如果不返回任何内容，使用 executeX 或 saveX 等。
- 避免嵌套块：
  - 提前检查并返回。
  - 提取到工具函数中。
- 使用高阶函数（map、filter、reduce 等）来避免函数嵌套。
  - 对于简单函数（少于 3 条指令）使用箭头函数。
  - 对于非简单函数使用具名函数。
- 使用默认参数值，而不是检查 null 或 undefined。
- 通过 RO-RO 减少函数参数：
  - 使用对象传递多个参数。
  - 使用对象返回结果。
  - 为输入参数和输出声明必要的类型。
- 使用单一的抽象级别。

### 数据

- 不要滥用原始类型，将数据封装在复合类型中。
- 避免在函数中进行数据验证，使用具有内部验证的类。
- 优先使用不可变数据。
  - 对于不变的数据使用 readonly。
  - 对于不变的字面量使用 const。

### 类

- 遵循 SOLID 原则。
- 优先使用组合而非继承。
- 声明接口以定义契约。
- 编写小型类，功能单一。
  - 指令数少于 200。
  - 公共方法少于 10 个。
  - 属性少于 10 个。

### 异常

- 使用异常处理您不期望的错误。
- 如果捕获异常，应该是为了：
  - 修复预期的问题。
  - 添加上下文。
  - 否则，使用全局处理程序。

## 特定于 Flutter

### 基本原则

- 使用干净的架构。
  - 如果需要将代码组织为模块，请参见模块。
  - 如果需要将代码组织为控制器，请参见控制器。
  - 如果需要将代码组织为服务，请参见服务。
  - 如果需要将代码组织为存储库，请参见存储库。
  - 如果需要将代码组织为实体，请参见实体。
- 使用存储库模式进行数据持久化。
  - 如果需要缓存数据，请参见缓存。
- 使用控制器模式与 GetX 处理业务逻辑。
- 使用 GetX 管理状态。
  - 如果需要保持状态，请参见 keepAlive。
- 使用 GetX 管理 UI 状态。
- 控制器始终接受方法作为输入，并更新影响 UI 的 UI 状态。
- 使用扩展管理可重用代码。
- 使用 ThemeData 管理主题。
- 使用 AppLocalizations 管理翻译。
- 使用常量管理常量值。
- 当小部件树变得过深时，可能导致更长的构建时间和更高的内存使用。Flutter 需要遍历整个树来呈现 UI，因此更平坦的结构提高了效率。
- 更平坦的小部件结构使理解和修改代码更容易。可重用组件也促进了更好的代码组织。
- 避免在 Flutter 中深度嵌套小部件。深度嵌套的小部件可能会对 Flutter 应用的可读性、可维护性和性能产生负面影响。旨在将复杂的小部件树拆分为更小的可重用组件。这不仅使您的代码更清晰，还通过减少构建复杂性来增强性能。
- 深度嵌套的小部件可能使状态管理变得更加困难。通过保持树的扁平化，更容易管理状态并在小部件之间传递数据。
- 将大型小部件拆分为更小、更专注的小部件。
- 尽可能使用 const 构造函数以减少重建次数。

### 性能优化

- 在可能的情况下使用 const 组件以优化重建。
- 实现列表视图优化（例如：ListView.builder）。

### UI 和样式

- 使用 Flutter 内置组件并创建自定义组件。
- 使用 LayoutBuilder 或 MediaQuery 实现响应式设计。
- 使用主题以保持应用一致的样式。

### 参考

- 界面视图库 [ducafe_ui_core packages](https://pub.dev/packages/ducafe_ui_core)

### 代码生成

- 使用 build_runner 从注解生成代码（Freezed、Riverpod、JSON 序列化）。
- 在修改注解类后运行 'flutter pub run build_runner build --delete-conflicting-outputs'。

### 文档

- 文档应复杂逻辑和非显而易见的代码决策。
- 遵循官方 Flutter 文档以获取最佳实践。
